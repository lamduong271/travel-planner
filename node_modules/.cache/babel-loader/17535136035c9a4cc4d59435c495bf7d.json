{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createSlice } from 'utils/@reduxjs/toolkit';\nimport { useInjectReducer, useInjectSaga } from 'utils/redux-injectors';\nimport { githubRepoFormSaga } from './saga';\nexport const initialState = {\n  username: 'react-boilerplate',\n  repositories: [],\n  loading: false,\n  error: null\n};\nconst slice = createSlice({\n  name: 'githubRepoForm',\n  initialState,\n  reducers: {\n    changeUsername(state, action) {\n      state.username = action.payload;\n    },\n\n    loadRepos(state) {\n      state.loading = true;\n      state.error = null;\n      state.repositories = [];\n    },\n\n    reposLoaded(state, action) {\n      const repos = action.payload;\n      state.repositories = repos;\n      state.loading = false;\n    },\n\n    repoError(state, action) {\n      state.error = action.payload;\n      state.loading = false;\n    }\n\n  }\n});\nexport const {\n  actions: githubRepoFormActions,\n  reducer\n} = slice;\nexport const useGithubRepoFormSlice = () => {\n  _s();\n\n  useInjectReducer({\n    key: slice.name,\n    reducer: slice.reducer\n  });\n  useInjectSaga({\n    key: slice.name,\n    saga: githubRepoFormSaga\n  });\n  return {\n    actions: slice.actions\n  };\n};\n\n_s(useGithubRepoFormSlice, \"ykJhATORHQGnaADRAJfvIx+/J2s=\", false, function () {\n  return [useInjectReducer, useInjectSaga];\n});","map":{"version":3,"sources":["/Users/lamduong/Planner/TripPlanner/TripPlanner/src/app/pages/HomePage/Features/GithubRepoForm/slice/index.ts"],"names":["createSlice","useInjectReducer","useInjectSaga","githubRepoFormSaga","initialState","username","repositories","loading","error","slice","name","reducers","changeUsername","state","action","payload","loadRepos","reposLoaded","repos","repoError","actions","githubRepoFormActions","reducer","useGithubRepoFormSlice","key","saga"],"mappings":";;AAEA,SAASA,WAAT,QAA4B,wBAA5B;AACA,SAASC,gBAAT,EAA2BC,aAA3B,QAAgD,uBAAhD;AACA,SAASC,kBAAT,QAAmC,QAAnC;AAGA,OAAO,MAAMC,YAAiC,GAAG;AAC/CC,EAAAA,QAAQ,EAAE,mBADqC;AAE/CC,EAAAA,YAAY,EAAE,EAFiC;AAG/CC,EAAAA,OAAO,EAAE,KAHsC;AAI/CC,EAAAA,KAAK,EAAE;AAJwC,CAA1C;AAOP,MAAMC,KAAK,GAAGT,WAAW,CAAC;AACxBU,EAAAA,IAAI,EAAE,gBADkB;AAExBN,EAAAA,YAFwB;AAGxBO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,cAAc,CAACC,KAAD,EAAQC,MAAR,EAAuC;AACnDD,MAAAA,KAAK,CAACR,QAAN,GAAiBS,MAAM,CAACC,OAAxB;AACD,KAHO;;AAIRC,IAAAA,SAAS,CAACH,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACAK,MAAAA,KAAK,CAACP,YAAN,GAAqB,EAArB;AACD,KARO;;AASRW,IAAAA,WAAW,CAACJ,KAAD,EAAQC,MAAR,EAAuC;AAChD,YAAMI,KAAK,GAAGJ,MAAM,CAACC,OAArB;AACAF,MAAAA,KAAK,CAACP,YAAN,GAAqBY,KAArB;AACAL,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACD,KAbO;;AAcRY,IAAAA,SAAS,CAACN,KAAD,EAAQC,MAAR,EAA8C;AACrDD,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAArB;AACAF,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACD;;AAjBO;AAHc,CAAD,CAAzB;AAwBA,OAAO,MAAM;AAAEa,EAAAA,OAAO,EAAEC,qBAAX;AAAkCC,EAAAA;AAAlC,IAA8Cb,KAApD;AAEP,OAAO,MAAMc,sBAAsB,GAAG,MAAM;AAAA;;AAC1CtB,EAAAA,gBAAgB,CAAC;AAAEuB,IAAAA,GAAG,EAAEf,KAAK,CAACC,IAAb;AAAmBY,IAAAA,OAAO,EAAEb,KAAK,CAACa;AAAlC,GAAD,CAAhB;AACApB,EAAAA,aAAa,CAAC;AAAEsB,IAAAA,GAAG,EAAEf,KAAK,CAACC,IAAb;AAAmBe,IAAAA,IAAI,EAAEtB;AAAzB,GAAD,CAAb;AACA,SAAO;AAAEiB,IAAAA,OAAO,EAAEX,KAAK,CAACW;AAAjB,GAAP;AACD,CAJM;;GAAMG,sB;UACXtB,gB,EACAC,a","sourcesContent":["import { PayloadAction } from '@reduxjs/toolkit';\nimport { Repo } from 'types/Repo';\nimport { createSlice } from 'utils/@reduxjs/toolkit';\nimport { useInjectReducer, useInjectSaga } from 'utils/redux-injectors';\nimport { githubRepoFormSaga } from './saga';\nimport { GithubRepoFormState, RepoErrorType } from './types';\n\nexport const initialState: GithubRepoFormState = {\n  username: 'react-boilerplate',\n  repositories: [],\n  loading: false,\n  error: null,\n};\n\nconst slice = createSlice({\n  name: 'githubRepoForm',\n  initialState,\n  reducers: {\n    changeUsername(state, action: PayloadAction<string>) {\n      state.username = action.payload;\n    },\n    loadRepos(state) {\n      state.loading = true;\n      state.error = null;\n      state.repositories = [];\n    },\n    reposLoaded(state, action: PayloadAction<Repo[]>) {\n      const repos = action.payload;\n      state.repositories = repos;\n      state.loading = false;\n    },\n    repoError(state, action: PayloadAction<RepoErrorType>) {\n      state.error = action.payload;\n      state.loading = false;\n    },\n  },\n});\n\nexport const { actions: githubRepoFormActions, reducer } = slice;\n\nexport const useGithubRepoFormSlice = () => {\n  useInjectReducer({ key: slice.name, reducer: slice.reducer });\n  useInjectSaga({ key: slice.name, saga: githubRepoFormSaga });\n  return { actions: slice.actions };\n};\n"]},"metadata":{},"sourceType":"module"}