{"ast":null,"code":"export class ResponseError extends Error {\n  constructor(response) {\n    super(response.statusText);\n    this.response = void 0;\n    this.response = response;\n  }\n\n}\n/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\n\nfunction parseJSON(response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n\n  return response.json();\n}\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\n\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  const error = new ResponseError(response);\n  error.response = response;\n  throw error;\n}\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\n\n\nexport async function request(url, options) {\n  const fetchResponse = await fetch(url, options);\n  const response = checkStatus(fetchResponse);\n  return parseJSON(response);\n}","map":{"version":3,"sources":["/Users/lamduong/Planner/TripPlanner/TripPlanner/src/utils/request.ts"],"names":["ResponseError","Error","constructor","response","statusText","parseJSON","status","json","checkStatus","error","request","url","options","fetchResponse","fetch"],"mappings":"AAAA,OAAO,MAAMA,aAAN,SAA4BC,KAA5B,CAAkC;AAGvCC,EAAAA,WAAW,CAACC,QAAD,EAAqB;AAC9B,UAAMA,QAAQ,CAACC,UAAf;AAD8B,SAFzBD,QAEyB;AAE9B,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;AANsC;AAQzC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,SAAT,CAAmBF,QAAnB,EAAuC;AACrC,MAAIA,QAAQ,CAACG,MAAT,KAAoB,GAApB,IAA2BH,QAAQ,CAACG,MAAT,KAAoB,GAAnD,EAAwD;AACtD,WAAO,IAAP;AACD;;AACD,SAAOH,QAAQ,CAACI,IAAT,EAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAqBL,QAArB,EAAyC;AACvC,MAAIA,QAAQ,CAACG,MAAT,IAAmB,GAAnB,IAA0BH,QAAQ,CAACG,MAAT,GAAkB,GAAhD,EAAqD;AACnD,WAAOH,QAAP;AACD;;AACD,QAAMM,KAAK,GAAG,IAAIT,aAAJ,CAAkBG,QAAlB,CAAd;AACAM,EAAAA,KAAK,CAACN,QAAN,GAAiBA,QAAjB;AACA,QAAMM,KAAN;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,eAAeC,OAAf,CACLC,GADK,EAELC,OAFK,EAGiC;AACtC,QAAMC,aAAa,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAMC,OAAN,CAAjC;AACA,QAAMT,QAAQ,GAAGK,WAAW,CAACK,aAAD,CAA5B;AACA,SAAOR,SAAS,CAACF,QAAD,CAAhB;AACD","sourcesContent":["export class ResponseError extends Error {\n  public response: Response;\n\n  constructor(response: Response) {\n    super(response.statusText);\n    this.response = response;\n  }\n}\n/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\nfunction parseJSON(response: Response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\nfunction checkStatus(response: Response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  const error = new ResponseError(response);\n  error.response = response;\n  throw error;\n}\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nexport async function request(\n  url: string,\n  options?: RequestInit,\n): Promise<{} | { err: ResponseError }> {\n  const fetchResponse = await fetch(url, options);\n  const response = checkStatus(fetchResponse);\n  return parseJSON(response);\n}\n"]},"metadata":{},"sourceType":"module"}