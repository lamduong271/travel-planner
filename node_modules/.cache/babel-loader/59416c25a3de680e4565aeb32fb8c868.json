{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createSlice } from 'utils/@reduxjs/toolkit';\nimport { useInjectReducer } from 'utils/redux-injectors';\nimport { getThemeFromStorage } from '../utils';\nexport const initialState = {\n  selected: getThemeFromStorage() || 'system'\n};\nconst slice = createSlice({\n  name: 'theme',\n  initialState,\n  reducers: {\n    changeTheme(state, action) {\n      state.selected = action.payload;\n    }\n\n  }\n});\nexport const {\n  actions: themeActions,\n  reducer\n} = slice;\nexport const useThemeSlice = () => {\n  _s();\n\n  useInjectReducer({\n    key: slice.name,\n    reducer: slice.reducer\n  });\n  return {\n    actions: slice.actions\n  };\n};\n\n_s(useThemeSlice, \"hTz558vVBvsYpq75jBKejf/T+2A=\", false, function () {\n  return [useInjectReducer];\n});","map":{"version":3,"sources":["/Users/lamduong/Planner/TripPlanner/TripPlanner/src/styles/theme/slice/index.ts"],"names":["createSlice","useInjectReducer","getThemeFromStorage","initialState","selected","slice","name","reducers","changeTheme","state","action","payload","actions","themeActions","reducer","useThemeSlice","key"],"mappings":";;AACA,SAASA,WAAT,QAA4B,wBAA5B;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AACA,SAASC,mBAAT,QAAoC,UAApC;AAGA,OAAO,MAAMC,YAAwB,GAAG;AACtCC,EAAAA,QAAQ,EAAEF,mBAAmB,MAAM;AADG,CAAjC;AAIP,MAAMG,KAAK,GAAGL,WAAW,CAAC;AACxBM,EAAAA,IAAI,EAAE,OADkB;AAExBH,EAAAA,YAFwB;AAGxBI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAA6C;AACtDD,MAAAA,KAAK,CAACL,QAAN,GAAiBM,MAAM,CAACC,OAAxB;AACD;;AAHO;AAHc,CAAD,CAAzB;AAUA,OAAO,MAAM;AAAEC,EAAAA,OAAO,EAAEC,YAAX;AAAyBC,EAAAA;AAAzB,IAAqCT,KAA3C;AAEP,OAAO,MAAMU,aAAa,GAAG,MAAM;AAAA;;AACjCd,EAAAA,gBAAgB,CAAC;AAAEe,IAAAA,GAAG,EAAEX,KAAK,CAACC,IAAb;AAAmBQ,IAAAA,OAAO,EAAET,KAAK,CAACS;AAAlC,GAAD,CAAhB;AACA,SAAO;AAAEF,IAAAA,OAAO,EAAEP,KAAK,CAACO;AAAjB,GAAP;AACD,CAHM;;GAAMG,a;UACXd,gB","sourcesContent":["import { PayloadAction } from '@reduxjs/toolkit';\nimport { createSlice } from 'utils/@reduxjs/toolkit';\nimport { useInjectReducer } from 'utils/redux-injectors';\nimport { getThemeFromStorage } from '../utils';\nimport { ThemeKeyType, ThemeState } from './types';\n\nexport const initialState: ThemeState = {\n  selected: getThemeFromStorage() || 'system',\n};\n\nconst slice = createSlice({\n  name: 'theme',\n  initialState,\n  reducers: {\n    changeTheme(state, action: PayloadAction<ThemeKeyType>) {\n      state.selected = action.payload;\n    },\n  },\n});\n\nexport const { actions: themeActions, reducer } = slice;\n\nexport const useThemeSlice = () => {\n  useInjectReducer({ key: slice.name, reducer: slice.reducer });\n  return { actions: slice.actions };\n};\n"]},"metadata":{},"sourceType":"module"}