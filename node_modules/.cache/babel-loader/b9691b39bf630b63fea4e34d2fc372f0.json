{"ast":null,"code":"var _jsxFileName = \"/Users/lamduong/Planner/TripPlanner/TripPlanner/src/utils/loadable.tsx\",\n    _this = this;\n\nimport React, { lazy, Suspense } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const lazyLoad = function (importFunc, selectorFunc) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    fallback: null\n  };\n  let lazyFactory = importFunc;\n\n  if (selectorFunc) {\n    lazyFactory = () => importFunc().then(module => ({\n      default: selectorFunc(module)\n    }));\n  }\n\n  const LazyComponent = /*#__PURE__*/lazy(lazyFactory);\n  return props => /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: opts.fallback,\n    children: /*#__PURE__*/_jsxDEV(LazyComponent, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, _this);\n};","map":{"version":3,"sources":["/Users/lamduong/Planner/TripPlanner/TripPlanner/src/utils/loadable.tsx"],"names":["React","lazy","Suspense","lazyLoad","importFunc","selectorFunc","opts","fallback","lazyFactory","then","module","default","LazyComponent","props"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,QAAtB,QAAsC,OAAtC;;AAOA,OAAO,MAAMC,QAAQ,GAAG,UAItBC,UAJsB,EAKtBC,YALsB,EAOnB;AAAA,MADHC,IACG,uEADU;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GACV;AACH,MAAIC,WAA0C,GAAGJ,UAAjD;;AAEA,MAAIC,YAAJ,EAAkB;AAChBG,IAAAA,WAAW,GAAG,MACZJ,UAAU,GAAGK,IAAb,CAAkBC,MAAM,KAAK;AAAEC,MAAAA,OAAO,EAAEN,YAAY,CAACK,MAAD;AAAvB,KAAL,CAAxB,CADF;AAED;;AAED,QAAME,aAAa,gBAAGX,IAAI,CAACO,WAAD,CAA1B;AAEA,SAAQK,KAAD,iBACL,QAAC,QAAD;AAAU,IAAA,QAAQ,EAAEP,IAAI,CAACC,QAAzB;AAAA,2BACE,QAAC,aAAD,OAAmBM;AAAnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CAtBM","sourcesContent":["import React, { lazy, Suspense } from 'react';\n\ninterface Opts {\n  fallback: React.ReactNode;\n}\ntype Unpromisify<T> = T extends Promise<infer P> ? P : never;\n\nexport const lazyLoad = <\n  T extends Promise<any>,\n  U extends React.ComponentType<any>,\n>(\n  importFunc: () => T,\n  selectorFunc?: (s: Unpromisify<T>) => U,\n  opts: Opts = { fallback: null },\n) => {\n  let lazyFactory: () => Promise<{ default: U }> = importFunc;\n\n  if (selectorFunc) {\n    lazyFactory = () =>\n      importFunc().then(module => ({ default: selectorFunc(module) }));\n  }\n\n  const LazyComponent = lazy(lazyFactory);\n\n  return (props: React.ComponentProps<U>): JSX.Element => (\n    <Suspense fallback={opts.fallback!}>\n      <LazyComponent {...props} />\n    </Suspense>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}